---
title: Data source
description: >
  URI to the data source, you can use different schemes, like http, xml,
  html, csv and etc. to specify how source data should be loaded.
oneOf:
  - type: string
  - type: object
    oneOf:
      - $ref: "#/definitions/csv"
      - $ref: "#/definitions/json"
      - $ref: "#/definitions/htmltable"
      - $ref: "#/definitions/sql"
      - $ref: "#/definitions/excel"
      - $ref: "#/definitions/xml"
definitions:
  csv:
    description: >
      See: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html#pandas.read_csv
    properties:
      type:
        enum: ["csv"]
      dsn:
        type: string
      sep:
        type: string
        title: "Separator"
        description: >
          Delimiter to use. If sep is None, separator will be automatically
          detected using Pythonâ€™s builtin sniffer tool, csv.Sniffer. In
          addition, separators longer than 1 character and different from '\s+'
          will be interpreted as regular expressions.

          Note that regex delimiters are prone to ignoring quoted data.
      header:
        oneOf:
          - type: integer
          - type: array
            items:
              type: integer
        description: >
          Row number(s) to use as the column names, and the start of the data.
          Default behavior is to infer the column names: if no names are passed
          the behavior is identical to header=0 and column names are inferred
          from the first line of the file, if column names are passed
          explicitly then the behavior is identical to header=None. Explicitly
          pass header=0 to be able to replace existing names. The header can be
          a list of integers that specify row locations for a multi-index on
          the columns e.g. [0,1,3]. Intervening rows that are not specified
          will be skipped (e.g. 2 in this example is skipped). Note that this
          parameter ignores commented lines and empty lines if
          skip_blank_lines=True, so header=0 denotes the first line of data
          rather than the first line of the file.
      skiprows:
        type: integer
      skipfooter:
        type: integer
      compression:
        enum:
          - gzip
          - bz2
          - zip
          - xz
      quotechar:
        type: string
      quoting:
        enum:
          - minimal
          - all
          - nonnumeric
          - none
      encoding:
        type: string
      error_bad_lines:
        type: boolean
      warn_bad_lines:
        type: boolean
  json:
    properties:
      type:
        enum: ["json"]
      dsn:
        type: string
      lines:
        type: boolean
        description: >
          Read file as one json object per line.
      encoding:
        type: string
  htmltable:
    properties:
      type:
        enum: ["htmltable"]
      dsn:
        type: string
      match:
        type: string
      skiprows:
        type: integer
      attrs:
        type: object
        patternProperties:
          "[a-z0-9_-]+":
            type: string
  sql:
    properties:
      type:
        enum: ["sql"]
      dsn:
        type: string
        description: >
          See: https://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls
      encoding:
        type: string
  excel:
    properties:
      type:
        enum: ["excel"]
      dsn:
        type: string
      sheet:
        oneOf:
          - type: string
          - type: integer
      header:
        oneOf:
          - type: integer
          - type: array
            items:
              type: integer
      skiprows:
        type: integer
      skipfooter:
        type: integer
  xml:
    properties:
      type:
        enum: ["xml"]
      dsn:
        type: string
      encoding:
        type: string
